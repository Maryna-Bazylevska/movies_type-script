{"version":3,"file":"static/js/643.0a56073e.chunk.js","mappings":"4OACaA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6GAOpBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kJAOpBG,EAAQL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2BAGlBK,EAAOP,EAAAA,GAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gDAIfO,EAAYT,EAAAA,GAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,2B,SCuBjC,MAzCA,WACE,IAAMS,GAAYC,EAAAA,EAAAA,MAAZD,QACNE,GAAwBC,EAAAA,EAAAA,UAAgB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAcpB,OAbAI,EAAAA,EAAAA,YAAU,WACJR,IACFS,EAAAA,EAAAA,IAAQT,GAASU,MAAK,SAACC,GACrBJ,EAAQI,EAAKL,KACf,GAEJ,GAAG,CAACN,KACJQ,EAAAA,EAAAA,YAAU,WACRI,OAAOC,SAAS,CACdC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,UAEd,KAEEC,EAAAA,EAAAA,KAAA,OAAAC,SACGd,GAAQA,EAAKe,OAAS,GACrBF,EAAAA,EAAAA,KAAC/B,EAAQ,CAAAgC,SACNd,EAAKgB,KAAI,SAACC,GAAK,OACdC,EAAAA,EAAAA,MAAChC,EAAQ,CAAA4B,SAAA,EACPD,EAAAA,EAAAA,KAACzB,EAAK,CACJ+B,IAAG,GAAAC,OACDH,EAAMI,aACF,qCAAuCJ,EAAMI,aAC7C,yDAENC,IAAKL,EAAMM,QAEbV,EAAAA,EAAAA,KAACvB,EAAI,CAAAwB,SAAEG,EAAMO,iBACbN,EAAAA,EAAAA,MAAC1B,EAAS,CAAAsB,SAAA,CAAC,cAAYG,EAAMQ,eAVhBR,EAAMS,GAWV,OAIfb,EAAAA,EAAAA,KAAA,KAAAC,SAAG,6CAIX,C,mKC3CMa,EAAU,mCACVC,EAAQ,+BAGDC,EAAY,SAACC,GACxB,OAAOC,EAAAA,EAAAA,IACA,GAADX,OACCQ,EAAQ,0BAAAR,OAAyBO,EAAO,0BAAAP,OAAyBU,IAErE1B,MAAK,SAAC4B,GACL,OAAOA,EAAS3B,IAClB,GACJ,EAEe4B,EAAkB,SAACvC,GAC9B,OAAOqC,EAAAA,EAAAA,IACA,GAADX,OAAIQ,EAAQ,WAAAR,OAAU1B,EAAO,aAAA0B,OAAYO,EAAO,oBACnDvB,MAAK,SAAC4B,GACL,OAAOA,EAAS3B,IAClB,GACJ,EACa6B,EAAoB,WAC/B,OAAOH,EAAAA,EAAAA,IACA,GAADX,OACCQ,EAAQ,gCAAAR,OAA+BO,EAAO,yBAAAP,OAtB5C,IAwBNhB,MAAK,SAAC4B,GACL,OAAOA,EAAS3B,IAClB,GACJ,EACaF,EAAU,SAACT,GACtB,OAAOqC,EAAAA,EAAAA,IACA,GAADX,OACCQ,EAAQ,WAAAR,OAAU1B,EAAO,qBAAA0B,OAAoBO,EAAO,oBAExDvB,MAAK,SAAC4B,GACL,OAAOA,EAAS3B,IAClB,GACJ,EAEa8B,EAAa,SAACzC,GACzB,OAAOqC,EAAAA,EAAAA,IACA,GAADX,OACCQ,EAAQ,WAAAR,OAAU1B,EAAO,qBAAA0B,OAAoBO,EAAO,2BAExDvB,MAAK,SAAC4B,GACL,OAAOA,EAAS3B,IAClB,GACJ,C","sources":["components/Cast/Cast.styled.ts","components/Cast/Cast.tsx","services/moves-api.ts"],"sourcesContent":["import styled from \"styled-components\";\r\nexport const CastList = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  margin-top: 20px;\r\n`;\r\nexport const CastItem = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: calc((100% - 20px * 6) / 6);\r\n  margin-right: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\nexport const Photo = styled.img`\r\n  width: 100px;\r\n`;\r\nexport const Name = styled.p`\r\n  font-weight: 500;\r\n  color: black;\r\n`;\r\nexport const Character = styled.p`\r\n  color: black;\r\n`;","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getCast } from \"../../services/moves-api\";\r\nimport { CastList, CastItem, Photo, Name, Character } from \"./Cast.styled\";\r\nfunction Cast() {\r\n  let { movieId } = useParams();\r\n  const [cast, setCast] = useState<any[]>([]);\r\n  useEffect(() => {\r\n    if (movieId) {\r\n      getCast(movieId).then((data) => {\r\n        setCast(data.cast);\r\n      });\r\n    }\r\n  }, [movieId]);\r\n  useEffect(() => {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  });\r\n  return (\r\n    <div>\r\n      {cast && cast.length > 0 ? (\r\n        <CastList>\r\n          {cast.map((actor) => (\r\n            <CastItem key={actor.id}>\r\n              <Photo\r\n                src={`${\r\n                  actor.profile_path\r\n                    ? \"http://image.tmdb.org/t/p/original\" + actor.profile_path\r\n                    : \"https://pomogaetsrazu.ru/images/offers/2829219234.jpg\"\r\n                }`}\r\n                alt={actor.name}\r\n              />\r\n              <Name>{actor.original_name}</Name>\r\n              <Character>Character: {actor.character}</Character>\r\n            </CastItem>\r\n          ))}\r\n        </CastList>\r\n      ) : (\r\n        <p>We don't have any actors for this movie</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Cast;\r\n","import axios from \"axios\";\r\nconst API_KEY = \"cebf74f2036e82ff6c32c96394fea389\";\r\nconst BASE_URL = `https://api.themoviedb.org/3`;\r\nconst page = 1;\r\n\r\nexport const getMovies = (query:string) => {\r\n  return axios\r\n    .get(\r\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}`\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    });\r\n};\r\n  \r\n  export const getMovieDetails = (movieId:string) => {\r\n    return axios\r\n      .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  };\r\n  export const getTrendingMovies = () => {\r\n    return axios\r\n      .get(\r\n        `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`\r\n      )\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  };\r\n  export const getCast = (movieId:string) => {\r\n    return axios\r\n      .get(\r\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n      )\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  };\r\n  \r\n  export const getReviews = (movieId:string) => {\r\n    return axios\r\n      .get(\r\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\r\n      )\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  };"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastItem","_templateObject2","Photo","_templateObject3","Name","_templateObject4","Character","_templateObject5","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","getCast","then","data","window","scrollTo","top","document","documentElement","scrollHeight","behavior","_jsx","children","length","map","actor","_jsxs","src","concat","profile_path","alt","name","original_name","character","id","API_KEY","BASE_URL","getMovies","query","axios","response","getMovieDetails","getTrendingMovies","getReviews"],"sourceRoot":""}